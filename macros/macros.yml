version: 2

macros:
  - name: cents_to_usd
    description: "Converts values in cents to dollars"
    arguments:
      - name: column_name
        description: "The column that contains the value to be converted"

      - name: precision
        description: "The number of decimal places the converted value should show. The default is 2"

  - name: convert_percent
    description: "Converts whole number values to a number between 0 and 1"
    arguments:
      - name: column_name
        description: "The column that contains the value to be converted"

      - name: precision
        description: "The number of decimal places the converted value should show. The default is 2"

  - name: clean_strings
    description: "Converts strings to upper case, removes trailing whitespace, and if the string is empty, converts it to `null`"
    arguments:
        - name: column_name
          description: "The column name that contains the string value that needs to be cleaned"

  - name: get_order_type
    description: Gets the order type for a given order id
    arguments:
      - name: table_name
        type: string
        description: Table name of the table that contians the `order_id` to be looked up in the `staging.stg_cc__orders` table

  - name: setup_dev_env
    description: '{{ doc("setup_dev_env") }}'
    arguments:
      - name: clone_db
        type: string
        description: "Name of the database that you would like to clone as a new dev environment database"

      - name: action
        type: string
        description: >
          The action you would like to take. The possible values are: `create`, `destroy`, or `dry_run`
            - `create`: This will clone the database given in the `clone_db` argument
            - `destroy`: This will destroy the cloned dev database that was created by the create action
            - `dry_run`: This will output the SQL statements used in the `create` and `destroy` actions so you can check to make sure the SQL is doing what is intended

  - name: generate_tag
    description: '{{ doc("generate_tag") }}'
    arguments:
      - name: ref
        type: string
        description: The dbt model reference that the tag values will be generated from

      - name: id_field
        type: string
        description: The name of the `id_field` that can be used to join back to other tables (e.g. `user_id`, `order_id`, etc)

      - name: tag_key
        type: string
        description: The tag value that acts as a short description of what the tag represents

      - name: tag_purpose
        type: string
        description: The purpose of the tag (e.g. `user_segment`, etc.)

      - name: tag_value
        type: string
        description: >
          This is an optional argument that can be used to pass in a specific value related to the tag. 
          For example, if the tag is generated once a user hits a certain revenue threshold, you can use 
          the `tag_value` to pass in the revenue amount for the user that put them in their segment. 
          This defaults to `null` if not provided
